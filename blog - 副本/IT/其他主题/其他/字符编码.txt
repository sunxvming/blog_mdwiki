【ASCII】
 1字节，首位没用上，7字节表示，共128个
【OEM字符集】
 1字节，首位也用上了，共256个。oem是硬件制造商的，比如IBM做PC时ASCII不够用，扩展一些，固化在硬件中
【MBCS(多字节字符集)和中文字符集】
 有些国家的字符256个容纳不下，就有两个字节来编码字符。
【GB2312】
 涵盖了所有简体字符以及一部分其他字符，共7445个字符
【GBK】
 （K代表扩展的意思）则在GB2312的基础上加入了对繁体字符等其他非简体字符
 GBK字符集使用区位码的方式为每个字符编号，首先定义一个94X94的矩阵，行称为“区”，列称为“位”，
 然后将所有国标汉字放入矩阵当中，这样每个汉字就可以用唯一的“区位”码来标识了。例如“中”字被放到54区第48位，
 因此字符码就是5448
【Unicode】
 Unicode只是定义了一个庞大的、全球通用的字符集
 Unicode中将字符集按照一定的类别划分到0~16这17个层面（Planes）中，每个层面中拥有216=65536个字符码，
 因此Unicode总共拥有的字符码，也即是Unicode的字符空间总共有17*65536=1114112
【UCS-2】    
 使用固定2个字节，最初设计的时候只考虑到BMP字符，无法表示Unicode其他层面上的字符
【UTF-16】   
 最少使用2个字节，支持Unicode全字符集的编解码，采用了变长编码，如果要编码BMP以外的字符，则需要4个字节结对
【UTF-8】
 并且由于ASCII字符经过UTF-16编码后得到的两个字节，高字节始终是0x00，很多C语言的函数都将此字节视为字符串末尾
 从而导致无法正确解析文本。因此一开始推出的时候遭到很多西方国家的抵触，大大影响了Unicode的推行。后来聪明的
 人们发明了UTF-8编码，解决了这个问题。
 UTF-8编码方案采用1-4个字节来编码字符，对于ASCII字符的编码使用单字节，和ASCII编码一摸一样
 Windows剪贴板只支持UTF-8编码，也就是说你传入的文本都会被UTF-8编解码
【GB18030】
 任何能够将Unicode字符映射为字节流的编码都属于Unicode编码。中国的GB18030编码，覆盖了Unicode所有的字符，
 因此也算是一种Unicode编码。只不过他的编码方式并不像UTF-8或者UTF-16一样，将Unicode字符的编号通过一定的规则
 进行转换，而只能通过查表的手段进行编码。
【Unicode是两个字节吗？】
 Unicode只是定义了一个庞大的、全球通用的字符集，并为每个字符规定了唯一确定的编号，具体存储为什么样的字节流，
 取决于字符编码方案。推荐的Unicode编码是UTF-16和UTF-8。 
【带签名的UTF-8】
 指的是字节流以BOM标记开始。很多软件会“智能”的探测当前字节流使用的字符编码，这种探测过程出于效率考虑，
 通常会提取字节流前面若干个字节，看看是否符合某些常见字符编码的编码规则。


【乱码问题】 
 造成乱码的原因就是因为使用了错误的字符编码去解码字节流，因此当我们在思考任何跟文本显示有关的问题时，
 请时刻保持清醒：当前使用的字符编码是什么


 例如最常见的网页乱码问题。如果你是网站技术人员，遇到这样的问题，需要检查以下原因：
  服务器返回的响应头Content-Type没有指明字符编码
  网页内是否使用META HTTP-EQUIV标签指定了字符编码
  网页文件本身存储时使用的字符编码和网页声明的字符编码是否一致 
  
【大小端】
 “中”的Unicode字符码是0x4E2D(01001110 00101101)，那么我们可以编码为01001110 00101101（大端）或者00101101 01001110 （小端）。
 大端：高位在前
 小端：地位在前
 说法源自《格列佛游记》。我们知道，鸡蛋通常一端大一端小，小人国的人们对于剥蛋壳时应从哪一端开始剥起有着 不一样的看法。同样，计算机界对于传输**多字节字**（由多个字节来共同表示一个数据类型）时，是先传高位字节（大端） 还是先传低位字节（ 小端 ）也有着不一样的看法，这就是计算机里头大 小端 模式的由来了。
无论是写文件还是网络传输， 实际上都是往流设备进行写操作的过程，而且这个写操作是从流的低地址向高地址开始写（这很符合人的习惯），
 对于多字节字来说，如果先写入高位字节，则称作大端模式。反之则称作小端模式。也就是说，大端模式下，字节序和 流设备的地址顺序是相反的，而 小端 模式则是相同的。一般网络协议都采用大端模式进行传输，windows操作系统采用  Utf-16 小端 模式。  
  
在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码。
用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件



浏览网页的时候，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器：






