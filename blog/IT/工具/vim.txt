【常用技巧】
最基本的 vi 操作，我就不多谈了，网上一搜一大堆，我来说几个写代码时比较实用的命 令。
1.“:tabnew”，新建一个编辑窗口，也就是支持多标签操作，多个标签可以用“gt”切 换。
2.“Ctrl+V”“Shift+V”的整列整行选择，然后就可以用“x”剪切、“p”粘贴。
“Ctrl+V”的列选择功能还有一个衍生的方便技巧：选择多列后按“I”，再输入“//”，
按 ESC，就可以在每行前面都插入“//”，轻松地实现大段代码的工整注释。
3.“Ctrl+P”是 vi 内置的“代码补全”功能，对我们程序员来说特别有用。只要写上开头
的一两个字符，再按“Ctrl+P”，vi 就可以提示出文件里曾经出现的词，这样，在写长名
字时，就再也不用害怕了。
不过，vi 的“代码补全”功能还是比较弱的，不是基于语法分析，而是简单的文本分词，
但我们也不能太苛求。
4. 可以随时用“Ctrl+Z”暂停 vi，把它放到后台，然后执行各种 Shell 操作，在需要的时
候，只要敲一个“fg”命令，就可以把 vi 恢复回来。
这在调试的时候非常有用，改改代码，运行一下，看看情况再切回来继续改，不用每次重复
vi 打开源文件，而且可以保留编辑的“现场”。
```
set nu
sy on
set ruler
set smartindent shiftwidth=4
set tabstop=4
set expandtab
set listchars=tab:>-,trail:~
set list
```






【存活】
i → Insert 模式，按 ESC 回到 Normal 模式.
x → 删当前光标所在的一个字符。
:wq → 存盘 + 退出 (:w 存盘, :q 退出) （陈皓注：:w 后可以跟文件名）
dd → 删除当前行，并把删除的行存到剪贴板里
p → 粘贴剪贴板


【感觉良好】
1.各种插入模式
a → 在光标后插入
o → 在当前行后插入一个新行
O → 在当前行前插入一个新行
cw → 替换从光标所在位置后到一个单词结尾的字符


2.简单的移动光标
0 → 数字零，到行头
^ → 到本行第一个不是blank字符的位置（所谓blank字符就是空格，tab，换行，回车等）
$ → 到本行行尾
g_ → 到本行最后一个不是blank字符的位置。
/pattern → 搜索 pattern 的字符串（陈皓注：如果搜索出多个匹配，可按n键到下一个）


3.拷贝/粘贴 
p/P都可以，p是表示在当前位置之后，P表示在当前位置之前
P → 粘贴
yy → 拷贝当前行当行于 


4.Undo/Redo
u → undo
<C-r> → redo


5.打开/保存/退出/改变文件(Buffer)
:e <path/to/file> → 打开一个文件
:w → 存盘
:saveas <path/to/file> → 另存为 <path/to/file>
:x， ZZ 或 :wq → 保存并退出 (:x 表示仅在需要时保存，ZZ不需要输入冒号并回车)
:q! → 退出不保存 :qa! 强行退出所有的正在编辑的文件，就算别的文件有更改。
:bn 和 :bp → 你可以同时打开很多文件，使用这两个命令来切换下一个或上一个文件。（陈皓注：我喜欢使用:n到下一个文件）


【更好，更强，更快】
1.重复
2dd → 删除2行
3p → 粘贴文本3次
10 i abc [ESC] → 会写下 “abc abc abc abc abc abc abc abc abc abc“
. → 重复上一个命令—— 10 “abc “.
n. → 重复 n 次 “desu” (注意：不是 300，你看，VIM多聪明啊).


2.光标移动
NG → 到第 N 行 （陈皓注：注意命令中的G是大写的，另我一般使用 : N 到第N行，如 :137 到第137行）
gg → 到第一行。（陈皓注：相当于1G，或 :1）
G → 到最后一行。
按单词移动：
 + w → 到下一个单词的开头。
 + e → 到下一个单词的结尾。
 > 如果你认为单词是由默认方式，那么就用小写的e和w。默认上来说，一个单词由字母，数字和下划线组成（陈皓注：程序变量）
 > 如果你认为单词是由blank字符分隔符，那么你需要使用大写的E和W。（陈皓注：程序语句）
% : 匹配括号移动，包括 (, {, [. （陈皓注：你需要把光标先移到括号上）
*和#:  匹配光标当前所在的单词，移动光标到下一个（或上一个）匹配单词（*是下一个，#是上一个）


3.光标移动+命令
你一定要记住光标的移动，因为很多命令都可以和这些移动光标的命令连动。很多命令都可以如下来干：
<start position><command><end position>
例如 0y$ 命令意味着：
0 → 先到行头
y → 从这里开始拷贝
$ → 拷贝到本行最后一个字符
你可可以输入 ye，从当前位置拷贝到本单词的最后一个字符。


你也可以输入 y2/foo 来拷贝2个 “foo” 之间的字符串。


还有很多时间并不一定你就一定要按y才会拷贝，下面的命令也会被拷贝：
d (删除 )
v (可视化的选择)
gU (变大写)
gu (变小写)
等等
（陈皓注：可视化选择是一个很有意思的命令，你可以先按v，然后移动光标，你就会看到文本被选择，然后，你可能d，也可y，也可以变大写等）


【Vim 超能力】




【查找替换】
:[range]s/pattern/string/[c,e,g,i]
range	指的是範圍，1,7 指從第一行至第七行，1,$ 指從第一行至最後一行，也就是整篇文章，也可以 % 代表。還記得嗎？ % 是目前編輯的文章，# 是前一次編輯的文章。
pattern	就是要被替換掉的字串，可以用 regexp 來表示。
string	將 pattern 由 string 所取代。
c	confirm，每次替換前會詢問。
e	不顯示 error。
g	globe，不詢問，整行替換。
i	ignore 不分大小寫。


/ 进行查找  n查找下一个  N查找上一个
Vim查找支持正则表达式，例如/vim$匹配行尾的"vim"。 需要查找特殊字符需要转义，例如/vim\$匹配"vim$"。
注意查找回车应当用\n，而替换为回车应当用\r（相当于<CR>）。


大小写敏感查找
在查找模式中加入\c表示大小写不敏感查找，\C表示大小写敏感查找。例如：
/foo\c
将会查找所有的"foo","FOO","Foo"等字符串。


大小写敏感配置
" 设置默认进行大小写不敏感查找
set ignorecase
" 如果有一个大写字母，则切换到大小写敏感查找
set smartcase 
将上述设置粘贴到你的~/.vimrc，重新打开Vim即可生效。


查找当前单词  *  #
在normal模式下按下*即可查找光标所在单词（word）， 要求每次出现的前后为空白字符或标点符号。例如当前为foo， 可以匹配foo bar中的foo，但不可匹配foobar中的foo。 这在查找函数名、变量名时非常有用。


按下g*即可查找光标所在单词的字符序列，每次出现前后字符无要求。 即foo bar和foobar中的foo均可被匹配到。


查找与替换
:s（substitute）命令用来查找和替换字符串。语法如下：


:{作用范围}s/{目标}/{替换}/{替换标志}
例如:%s/foo/bar/g会在全局范围(%)查找foo并替换为bar，所有出现都会被替换（g）。


作用范围
当前行：   :s/foo/bar/g
全文：     :%s/foo/bar/g
选区，在Visual模式下选择区域后输入:，Vim即可自动补全为 :'<,'>。
:'<,'>s/foo/bar/g
行数：2-11行
:5,12s/foo/bar/g
当前行.与接下来两行+2：
:.,+2s/foo/bar/g


替换标志
上文中命令结尾的g即是替换标志之一，表示全局global替换（即替换目标的所有出现）。 还有很多其他有用的替换标志：


空替换标志表示只替换本行从光标位置开始，目标的第一次出现：
:%s/foo/bar


i表示大小写不敏感查找，I表示大小写敏感：
:%s/foo/bar/i
# 等效于模式中的\c（不敏感）或\C（敏感）
:%s/foo\c/bar


c表示需要确认，例如全局查找"foo"替换为"bar"并且需要确认：
:%s/foo/bar/gc


回车后Vim会将光标移动到每一次"foo"出现的位置，并提示
replace with bar (y/n/a/q/l/^E/^Y)?
按下y表示替换，n表示不替换，a表示替换所有，q表示退出查找模式， l表示替换当前位置并退出。^E与^Y是光标移动快捷键，参考： Vim中如何快速进行光标移动。

